import pandas as pd

# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
column_names = [
    "age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", 
    "exang", "oldpeak", "slope", "ca", "thal", "target"
]
df = pd.read_csv(url, names=column_names, na_values="?")

# Display the first few rows
print(df.head())
# Check for missing values
print(df.isnull().sum())

# Drop rows with missing values (or impute them if needed)
df = df.dropna()

# Reset the index
df = df.reset_index(drop=True)
# Convert the target variable to binary (1 = heart disease, 0 = no heart disease)
df["target"] = df["target"].apply(lambda x: 1 if x > 0 else 0)

# One-hot encode categorical features
df = pd.get_dummies(df, columns=["cp", "restecg", "slope", "thal"], drop_first=True)
from sklearn.preprocessing import StandardScaler

# Define numerical features
numerical_features = ["age", "trestbps", "chol", "thalach", "oldpeak"]

# Scale numerical features
scaler = StandardScaler()
df[numerical_features] = scaler.fit_transform(df[numerical_features])
from sklearn.model_selection import train_test_split

# Define features (X) and target (y)
X = df.drop("target", axis=1)
y = df["target"]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

# Initialize the model
model = LogisticRegression(max_iter=1000, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))
import shap

# Initialize the SHAP explainer for linear models
explainer = shap.LinearExplainer(model, X_train)

# Calculate SHAP values for the test set
shap_values = explainer.shap_values(X_test)

# Check the type and shape of shap_values
print(type(shap_values))
print(shap_values.shape)
# Force plot for a single prediction
shap.force_plot(explainer.expected_value, shap_values[0, :], X_test.iloc[0, :])
# Decision plot for multiple predictions
shap.decision_plot(explainer.expected_value, shap_values, X_test)






